{"version":3,"sources":["js/timer.js","index.js"],"names":["CountdownTimer","constructor","selector","targetDate","intervalId","start","startTime","deltaTime","getTime","Date","now","updateClockface","setInterval","stop","clearInterval","getTimerElements","root","document","querySelector","refs","days","hours","minutes","seconds","time","timer","pad","Math","floor","mins","secs","textContent","value","String","padStart"],"mappings":";;;AAAA,MAAMA,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,WAAa,KACbC,KAAAA,QAIPA,QACQC,MAEAC,EAFY,KAAKJ,WAAWK,UACdC,KAAKC,MAEpBC,KAAAA,gBAAgBJ,GAChBH,KAAAA,WAAaQ,YAAY,KACtBN,MAEAC,EAFY,KAAKJ,WAAWK,UACdC,KAAKC,MAErBH,GAAa,EACVM,KAAAA,OAGFF,KAAAA,gBAAgBJ,IACpB,KAGLM,OACEC,cAAc,KAAKV,YACdO,KAAAA,gBAAgB,GAGvBI,iBAAiBb,GACTc,MAAAA,EAAOC,SAASC,cAAchB,GAO7BiB,MANM,CACXC,KAAMJ,EAAKE,cAAc,2BACzBG,MAAOL,EAAKE,cAAc,4BAC1BI,QAASN,EAAKE,cAAc,2BAC5BK,QAASP,EAAKE,cAAc,4BAKhCP,gBAAgBa,GACRC,MAAAA,EAAQ,KAAKV,iBAAiB,KAAKb,UACnCkB,EAAO,KAAKM,IAAIC,KAAKC,MAAMJ,EAAQ,QACnCH,EAAQ,KAAKK,IACjBC,KAAKC,MAAOJ,EAAQ,MAAyB,OAEzCK,EAAO,KAAKH,IAAIC,KAAKC,MAAOJ,EAAQ,KAAoB,MACxDM,EAAO,KAAKJ,IAAIC,KAAKC,MAAOJ,EAAQ,IAAc,MACxDC,EAAML,KAAKW,eAAiBX,IAC5BK,EAAMJ,MAAMU,eAAiBV,IAC7BI,EAAMH,QAAQS,eAAiBF,IAC/BJ,EAAMF,QAAQQ,eAAiBD,IAEjCJ,IAAIM,GACKC,OAAAA,OAAOD,GAAOE,SAAS,EAAG,MAIrC,MAAMT,EAAQ,IAAIzB,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIM,KAAK;;AC7DvB,aADA,QAAA,iBACA,QAAA","file":"src.3d30df88.js","sourceRoot":"../src","sourcesContent":["class CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.intervalId = null;\n    this.start();\n  }\n  // Методы\n  // Запускаем таймер\n  start() {\n    const startTime = this.targetDate.getTime();\n    const currentTime = Date.now();\n    const deltaTime = startTime - currentTime;\n    this.updateClockface(deltaTime);\n    this.intervalId = setInterval(() => {\n      const startTime = this.targetDate.getTime();\n      const currentTime = Date.now();\n      const deltaTime = startTime - currentTime;\n      if (deltaTime <= 0) {\n        this.stop();\n        return;\n      }\n      this.updateClockface(deltaTime);\n    }, 1000);\n  }\n  // удаляем таймер после окончания отсчета времени\n  stop() {\n    clearInterval(this.intervalId);\n    this.updateClockface(0);\n  }\n\n  getTimerElements(selector) {\n    const root = document.querySelector(selector);\n    const refs = {\n      days: root.querySelector('span[data-value=\"days\"]'),\n      hours: root.querySelector('span[data-value=\"hours\"]'),\n      minutes: root.querySelector('span[data-value=\"mins\"]'),\n      seconds: root.querySelector('span[data-value=\"secs\"]'),\n    };\n    return refs;\n  }\n\n  updateClockface(time) {\n    const timer = this.getTimerElements(this.selector);\n    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));\n    const hours = this.pad(\n      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),\n    );\n    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\n    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));\n    timer.days.textContent = `${days}`;\n    timer.hours.textContent = `${hours}`;\n    timer.minutes.textContent = `${mins}`;\n    timer.seconds.textContent = `${secs}`;\n  }\n  pad(value) {\n    return String(value).padStart(2, '0');\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jun 05, 2021'),\n});","import './styles.scss';\nimport './js/timer';\n"]}